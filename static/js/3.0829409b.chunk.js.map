{"version":3,"sources":["components/error/error.gif","components/error/Error.js","hooks/http.hook.js","services/MarvelService.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/errorBoundary/errorBoundary.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["Error","style","display","width","height","objectFit","margin","src","errorImg","alt","useHttp","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","status","json","data","message","clearError","useMarvelService","_apiBase","_apiKey","_offset","getAllCharacters","offset","res","results","map","_transformCharacter","getAllComics","_transformComic","getOneCharacter","id","getOneComic","comics","title","description","pageCount","thumbnail","path","extension","language","textObjects","price","prices","length","string","slice","newString","split","splice","join","name","homepage","urls","wikipedia","items","LeftSide","char","className","href","RandomChar","setChar","updateChar","random","Math","floor","then","result","onCharLoaded","useEffect","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","onCharSelected","charList","setList","newItemLoading","setItemLoading","setOffset","charEnded","setCharEnded","updateChars","initial","onCharsLoaded","newCharList","ended","itemsRef","useRef","arr","item","i","current","forEach","classList","remove","add","focus","ref","el","renderItems","disabled","ErrorBoundary","state","onError","setState","errorInfo","this","props","children","Component","Skeleton","SideInfo","CharInfo","charId","skeleton","MainPage","selectedChar","decoration"],"mappings":"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","file":"static/js/3.0829409b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import React from 'react';\r\n\r\nimport errorImg from './error.gif'\r\n\r\nconst Error = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={errorImg} alt=\"error.gif\"/>\r\n    );\r\n};\r\n\r\nexport default Error;\r\n","import {useState} from \"react\";\r\nimport {useCallback} from \"react\";\r\n\r\n\r\nconst useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if(!response.ok) {\r\n                throw new Error(`Couldn't fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, error, request, clearError}\r\n}\r\n\r\nexport default useHttp;","import useHttp from \"../hooks/http.hook\";\r\n\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, clearError, request, error} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=7680b2c8e48a15aed117e5a6bc139d57';\r\n    const _offset = 210;\r\n\r\n    const getAllCharacters = async (offset = _offset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n\r\n    const getAllComics = async (offset = _offset) => {\r\n        const res = await request(`${_apiBase}comics?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComic)\r\n\r\n    }\r\n\r\n    const getOneCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0])\r\n    }\r\n\r\n    const getOneComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComic(res.data.results[0])\r\n    }\r\n\r\n    const _transformComic = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (res) => {\r\n        if(res.description.length > 225) {\r\n            let string = res.description.slice(0, 225);\r\n            let newString = string.split(' ');\r\n            newString.splice(newString.length-1,1);\r\n            string = newString.join(' ');\r\n            return string + '...';\r\n        }\r\n\r\n        return {\r\n            id: res.id,\r\n            name: res.name,\r\n            description: res.description,\r\n            thumbnail: res.thumbnail.path + '.' + res.thumbnail.extension,\r\n            homepage: res.urls[0].url,\r\n            wikipedia: res.urls[1].url,\r\n            comics: res.comics.items,\r\n        }\r\n    }\r\n\r\n    const _transformAllCharacters = (res) => {\r\n        return {\r\n            name: res.name,\r\n            thumbnail: res.thumbnail.path + '.' + res.thumbnail.extension,\r\n        }\r\n    }\r\n\r\n    return {loading, error, getAllCharacters, getOneCharacter, clearError, getAllComics, getOneComic};\r\n}\r\n\r\nexport default useMarvelService;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport Spinner from \"../spinner/Spinner\";\nimport Error from \"../error/Error\";\nimport {useEffect, useState} from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n\n    const {loading, error, getOneCharacter, getAllCharacters, clearError} = useMarvelService();\n\n\n    const updateChar = () => {\n        clearError();\n\n        let random = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n\n        getOneCharacter(random)\n            .then(result => onCharLoaded(result))\n    }\n\n    useEffect(() => {\n        updateChar();\n    }, []);\n\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const errorMessage = error ? <Error /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(spinner || errorMessage) ? <LeftSide char={char}/> : null;\n\n\n    return (\n        <div className=\"randomchar\">\n\n            {errorMessage}\n            {spinner}\n            {content}\n\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\" onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n\n}\n\nconst LeftSide = ({char}) => {\n    const {name, wikipedia, homepage, description, thumbnail} = char;\n\n    let objectFit = 'randomchar__img';\n\n    if(thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        objectFit += ' randomchar__contain';\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className={objectFit}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description === null || description === '' ? 'No description' : description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wikipedia} className=\"button button__secondary\">\n                        <div className=\"inner\">Wikipedia</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import './charList.scss';\nimport React, {Component, useEffect, useRef, useState} from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport Error from \"../error/Error\";\nimport Spinner from \"../spinner/Spinner\";\n\nconst CharList = ({onCharSelected}) => {\n    const [charList, setList] = useState([]);\n    const [newItemLoading, setItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {error, loading, getAllCharacters, getOneCharacter} = useMarvelService();\n\n    const updateChars = (offset, initial) => {\n        initial ? setItemLoading(false) : setItemLoading(true);\n\n        getAllCharacters(offset)\n            .then(result => onCharsLoaded(result))\n    }\n\n    const onCharsLoaded = (newCharList) => {\n        let ended = false;\n\n        if(newCharList.length < 9) {\n            ended = true;\n        }\n\n        setList(charList => [...charList, ...newCharList]);\n        setItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n\n    }\n\n    useEffect(() => {\n        updateChars(offset, true);\n    }, [])\n\n\n    const itemsRef = useRef([]);\n\n\n    const focusOnItem = (id) => {\n        itemsRef.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemsRef.current[id].classList.add('char__item_selected');\n        itemsRef.current[id].focus();\n    }\n\n    const renderItems = (arr) => {\n        const items = arr.map((item,i) => {\n\n        let objectFit = 'randomchar__img';\n\n        if(item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n            objectFit += ' char__fill';\n        }\n\n        return (\n            <li\n                className=\"char__item\"\n                key={item.id}\n                onClick={() => {\n                    onCharSelected(item.id)\n                    focusOnItem(i)\n                }}\n                ref={el => itemsRef.current[i] = el}\n            >\n                <img src={item.thumbnail} alt=\"abyss\" className={objectFit}/>\n                <div className=\"char__name\">{item.name}</div>\n            </li>\n        )\n        })\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n\n        const items = renderItems(charList);\n\n        const errorMessage = error ? <Error /> : null;\n        const spinner = loading && !newItemLoading ? <Spinner /> : null;\n        const content = !(spinner || errorMessage) ? items : null;\n\n        return (\n            <div className=\"char__list\">\n                {content}\n                {spinner}\n                {errorMessage}\n                <button\n                    className=\"button button__main button__long\"\n                    disabled={newItemLoading}\n                    style={{display: charEnded ? 'none' : 'block'}}\n                    onClick={() => updateChars(offset)}\n                >\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n}\n\nexport default CharList;\n","import React, {Component} from 'react';\r\nimport Error from \"../error/Error\";\r\n\r\nclass ErrorBoundary extends Component{\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    onError = () => {\r\n        this.setState({\r\n            error: true,\r\n        })\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({error: true})\r\n    }\r\n\r\n    render() {\r\n\r\n        if(this.state.error) {\r\n            return <Error />\r\n        } else {\r\n            return this.props.children\r\n        }\r\n\r\n    }\r\n};\r\n\r\nexport default ErrorBoundary;\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import './charInfo.scss';\nimport {Component, useEffect, useState} from \"react\";\nimport Error from \"../error/Error\";\nimport Spinner from \"../spinner/Spinner\";\nimport Skeleton from \"../skeleton/Skeleton\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nconst CharInfo = ({charId}) => {\n    const [char, setChar] = useState(null);\n\n    const {error, getOneCharacter, getAllCharacters, loading} = useMarvelService();\n\n    const onCharLoaded = (newChar) => {\n        setChar(newChar);\n    }\n\n    const updateChar = () => {\n        if(!charId) {\n            return;\n        }\n\n\n        getOneCharacter(charId)\n            .then(result => onCharLoaded(result))\n    }\n\n    useEffect(() => {\n            updateChar();\n    }, [charId]);\n\n\n    const errorMessage = error ? <Error /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(spinner || errorMessage || !char) ? <SideInfo char={char}/> : null;\n    const skeleton = char || loading || error ? null : <Skeleton />;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {content}\n            {spinner}\n            {errorMessage}\n        </div>\n    )\n\n}\n\nconst SideInfo = ({char}) => {\n    const {name, wikipedia, homepage, description, thumbnail, comics} = char;\n\n    let objectFit = 'randomchar__img';\n\n    if(thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        objectFit += ' char__unset';\n    }\n\n    if(comics.length > 10) {\n        return comics.splice(0, 10);\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} className={objectFit}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wikipedia} className=\"button button__secondary\">\n                            <div className=\"inner\">Wikipedia</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0\n                    ?\n                    comics.map((item, i) => {\n                        return <li key={i} className=\"char__comics-item\">\n                            {item.name}\n                        </li>\n                    })\n                    :\n                    'No comics now...'\n                }\n            </ul>\n        </>\n    )\n}\n\nexport default CharInfo;\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import React, {useState} from 'react';\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport ErrorBoundary from \"../errorBoundary/errorBoundary\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport decoration from \"../../resources/img/vision.png\";\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <RandomChar/>\r\n            <div className=\"char__content\">\r\n                <CharList onCharSelected={onCharSelected}/>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar}/>\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainPage;\r\n"],"sourceRoot":""}